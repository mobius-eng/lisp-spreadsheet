* Lisp-Spreadsheet 

[[file:lisp-spreadsheet-screenshot.png]]

** Why spreadsheet?

While working with a complicated data, I found that

- It is easy to visually grasp it in a table and
- I need fully featured programming language to express the models
  behind the data.

By the data I don't mean just a table of uniform data with a few
columns and lots of rows. In this case think about multitude of
parameters that need to be supplied to setup some complex process. How
to make sure you have updated them all? You'd need some kind of
watches and you would need some way to show them.

So, this is a Qt widget written on the top of QTOOLS library to
provide spreadsheet-like functionality.

** How it works

When you edit a cell, you write LISP code. It is a dangerous part as
what is happening write now: the text is read by the reader
=READ-FROM-STRING= and then evaluated by =EVAL= and the result is
outputed into the string by =(FORMAT NIL "~A" X)= expression. But,
these are not hard-coded --- you can supply your own
reader and evaluator. The aim of this widget is to be able to run
under CAS MAXIMA and read MAXIMA expressions (and LISP ones with
=:lisp= preffix). *NOTE*: right now to change default reader,
evaluator and formatter you will need to change =:INITFORM='s of
=CELL-DATA= class slots =INPUT-READER=, =INPUT-EVALUATOR= and
=OUTPUT-FORMATTER=, but I am working on a proper API.

*BIG NOTE*: right now this is not a proper spreadsheet, as it does not
track dependencies between cells. So, the updates won't be picked up
immediately. The dependencies a planned in the future (see future
plans).

** Basic operations

The widget is based on =QTableWdget= which is by itself is rather
defficient for this kind of application. So, the functionality is a
bit limited.

There are two modes: general and editing (just like in old-good
=vi=). In general mode you can move between the cells and select a
cell to edit. In editing mode you edit the cell contents and accept
the edit or reject it.

Keybindings in general mode:
- [Enter] to start editing the cell
- [Up], [Down], [Left], [Right] to move between the cells
- Mouse click will select a cell.

Keybindings in editing mode:
- Any text input will input the text
- [Backspace] will remove previous character
- [Enter] will accept the changes and enter a general mode
- [Up], [Down], [Left], [Right] : the same as [Enter], plus move the
  focus in specified direction
- [Esc] will discard the changes in the cell and enter general mode.

Entering and exiting the editing mode of the cell will cause cell to
re-evaluate its value.

** Future plans
*** General [7/8]
In more or less priority order:
- [X] Reference cells and ranges
- [X] Sort out empty cells
- [X] Make reader, evaluator and formatter easier to customize
- [X] Add REPL (QT-GUI-REPL)
- [X] Handle errors in inputs
- [ ] Resolve cell dependecies
- [X] Change cell presentation on keys [I], [O], [V] in editing mode
- [X] Update cell visual on presentation change

*** MAXIMA integration [3/3]
- [X] It can be loaded into MAXIMA
- [X] Implement wrappers for =cell= in MAXIMA
- [X] Put MAXIMA changes into a separate branch
- [ ] Make MAXIMA REPL available

** Notes
There can be only *ONE* working instance of the spreadsheet
(at least in one thread, but it hasn't been tested with multiple
threads).

Cell dependencies is a tricky one as each cell can contain /any/ LISP
expression. For example, =(DEFVAR *X* 10)=. Then, if somewhere =(SETF
*X* 20)=, it is very difficult to catch if some cells depend on
=*X*=. Also, how to prohibit cyclic dependencies? For now, the most
viable solution seems to have a refresh button that will re-evaluate
all the cells in some (specified or unspecified) order.

** Installation

Clone this repo into =quicklisp/local-projects= directory. From there 
#+BEGIN_SRC lisp
  (ql:quickload "lisp-spreadsheet")
  (lisp-spreadsheet::run-spreadsheet) ;; for the demo
#+END_SRC

As it depends on QT-LIBS, the insallation may take some time for all
Qt infrastructure to be properly installed.

Was tested to work on Ubuntu 16.10 with SBCL 1.3.19. On Windows 10,
AFAIK, there is a problem of loading (old) Qt 4.x libraries, but it
/should/ work on Windows 7.

** Disclaimer

This is the first pre-alpha pre-release, mostly just a proof of
concept. So, expect lots of rough edges. Any feedback on bugs and
unexpected behaviour is welcomed. If you have bright ideas (or better,
implementations) that can improve this spreadsheet, please, don't
hasitate to create a pull request.

** License

BSD
